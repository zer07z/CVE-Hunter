import requests
from bs4 import BeautifulSoup
import json


def cve_details_get(new_cveid_list):
    url = 'https://nvd.nist.gov/vuln/detail/'
    header = {
        "User-Agent":
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36"
    }
    for cveid in new_cveid_list:
        new_url = url + cveid
        resp = requests.get(new_url, headers=header)
        html = resp.text
        soup = BeautifulSoup(html, 'html.parser')
        # 描述
        descriptions = soup.find('p', {'data-testid': 'vuln-description'})
        description = descriptions.text.strip(
        )  # 切记，要用{'data-testid': 'vuln-description'}  而不是 'data-testid'= 'vuln-description' ，因为=会报错，规范的写法是引号,而且要加大括号
        # print('################################################')
        # print(description.text)
        # 评分
        range = '-'
        try:
            score = soup.find(
                'a', {
                    'class': [
                        'label label-danger', 'label label-critical',
                        'label label-default', 'label label-warning'
                    ]
                }
            )  # 评分筛选，涉及到两个字段，有可能是label label-critical，也有可能是label label-danger
            range = score.text
        except:  # noqa
            pass
        # 参考链接
        link1 = soup.find(
            'table', {
                'class':
                'table table-striped table-condensed table-bordered detail-table'
            })
        link2_list = link1.findAll('a', href=True)[:3]
        link_list = [link['href'] for link in link2_list]
        link_str = "  \n".join(
            link_list)  # 钉钉使用的是Markdown语法，而Markdown语法中需要使用两个空格和一个换行符来实现换行
        # print(link_list)
        # [des,dang,frp,[linklst]]组成一个列表，方便推送[[cve1的所有信息list],[cve2的所有信息list],[],[]]

        # oscs信息爬取，包括修复方案和影响范围

        urls = 'https://www.oscs1024.com/oscs/v1/vdb/info'
        a = {"vuln_no": cveid}
        respn = requests.post(url=urls, json=a, headers=header)
        # print(respn.text)
        json1_data = respn.text
        json_dict = json.loads(json1_data)
        version_list = []
        repair_list = []
        version_str = '暂无'
        repair_str = '暂无'
        try:
            for vuln_dict in json_dict['data'][0]['effect']:
                version_list.append(
                    f'{vuln_dict["name"]}@{vuln_dict["affected_version"]}')
            # print(version_list)
            version_str = "  \n".join(version_list)
            # print(version_str)
        except:  # noqa
            pass

        try:
            repair_list = json_dict['data'][0]['soulution_data']
            repair_str = "  \n".join(repair_list)
        except:  # noqa
            pass

        # 推送至钉钉
        urlq = 'https://oapi.dingtalk.com/robot/send?access_token=' #添加自己的token
        header = {'Content-Type': 'application/json'}
        jsons = {
            "msgtype": "markdown",
            "markdown": {
                "title":
                "新漏洞推送",
                "text":
                f"## {cveid} \n___\n##### {description} \n___\n#### **评分**：{range}\n#### **影响版本**：\n{version_str}\n#### **修复建议**:\n{repair_str}\n#### **参考链接**:\n{link_str}\n___\n #### 参考漏洞库[阿里云漏洞库](https://avd.aliyun.com/) | [OSCS](https://www.oscs1024.com/) | [NIST](https://nvd.nist.gov/)"
            },
        }
        res = requests.post(url=urlq, json=jsons, headers=header)  # noqa
